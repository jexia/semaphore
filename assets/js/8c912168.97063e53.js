(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{109:function(e,n,r){"use strict";r.d(n,"a",(function(){return d})),r.d(n,"b",(function(){return v}));var t=r(0),o=r.n(t);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=o.a.createContext({}),p=function(e){var n=o.a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},d=function(e){var n=p(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=p(r),b=t,v=d["".concat(c,".").concat(b)]||d[b]||u[b]||i;return r?o.a.createElement(v,s(s({ref:n},l),{},{components:r})):o.a.createElement(v,s({ref:n},l))}));function v(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,c=new Array(i);c[0]=b;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s.mdxType="string"==typeof e?e:t,c[1]=s;for(var l=2;l<i;l++)c[l]=r[l];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},91:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return c})),r.d(n,"metadata",(function(){return s})),r.d(n,"toc",(function(){return a})),r.d(n,"default",(function(){return p}));var t=r(3),o=r(7),i=(r(0),r(109)),c={id:"service_discovery.configuration",title:"Service Discovery Client Configuration",sidebar_label:"Service Discovery",slug:"/service_discovery/configuration"},s={unversionedId:"service_discovery.configuration",id:"service_discovery.configuration",isDocsHomePage:!1,title:"Service Discovery Client Configuration",description:"Intro",source:"@site/docs/service_discovery-configuration.md",sourceDirName:".",slug:"/service_discovery/configuration",permalink:"/semaphore/docs/service_discovery/configuration",editUrl:"https://github.com/jexia/semaphore/edit/master/website/docs/service_discovery-configuration.md",version:"current",sidebar_label:"Service Discovery",frontMatter:{id:"service_discovery.configuration",title:"Service Discovery Client Configuration",sidebar_label:"Service Discovery",slug:"/service_discovery/configuration"},sidebar:"docs",previous:{title:"DevOps",permalink:"/semaphore/docs/devops"}},a=[{value:"Intro",id:"intro",children:[]},{value:"Defining clients",id:"defining-clients",children:[]},{value:"Using discovery clients",id:"using-discovery-clients",children:[]},{value:"Example",id:"example",children:[]}],l={toc:a};function p(e){var n=e.components,r=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},l,r,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"intro"},"Intro"),Object(i.b)("p",null,"Semaphore can resolve service address not only through DNS, but using a specific service discovery server such as Consul by HashiCorp."),Object(i.b)("p",null,"By default, Semaphore resolves service hosts  through the default DNS performing a regular query with no actions from the Semaphore side.\nWe can set up several service discovery configurations and use them as address resolvers in every service independently."),Object(i.b)("h2",{id:"defining-clients"},"Defining clients"),Object(i.b)("p",null,"To configure a service discovery client, we use ",Object(i.b)("inlineCode",{parentName:"p"},"discovery")," block:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-hcl"},'discovery "consul" {\n  address = "http://localhost:8500"\n}\n')),Object(i.b)("p",null,"By default, the block label (",Object(i.b)("inlineCode",{parentName:"p"},'"consul"')," in the example above) defines not only the name of the configuration, but the provider type as well.\nWe still can define a configuration with a custom name, using ",Object(i.b)("inlineCode",{parentName:"p"},"provider")," field to tell Semaphore what adapter it should use:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-hcl"},'discovery "production-1" {\n  address = "http://localhost:8500"\n  provider = "consul"\n}\n')),Object(i.b)("p",null,"Semaphore supports defining several discovery clients what might be useful in some rare cases:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-hcl"},'discovery "production-old" {\n  address = "http://production-old:850"\n  provider = "consul"\n}\n\ndiscovery "production-new" {\n  address = "http://production-new:850"\n  provider = "consul"\n}\n\n// and so on\n')),Object(i.b)("h2",{id:"using-discovery-clients"},"Using discovery clients"),Object(i.b)("p",null,"To use a discovery service, we should set ",Object(i.b)("inlineCode",{parentName:"p"},"resolver")," field in service configuration, referencing to the discovery client name:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-hcl"},'service "com.semaphore" "awesome-dogs" {\n  transport = "http"\n  codec     = "json"\n  host      = "http://awesome-dogs"\n  resolver  = "consul" // or "production-old"\n\n  method "List" {\n    response = "com.semaphore.Dogs"\n    request = "com.semaphore.Void"\n\n    options {\n      endpoint = "/"\n      method = "GET"\n    }\n  }\n}\n')),Object(i.b)("p",null,"When we set ",Object(i.b)("inlineCode",{parentName:"p"},"resolver")," property, Semaphore uses ",Object(i.b)("inlineCode",{parentName:"p"},"host")," property as a service name and scheme. But the port should be received from the Service Discovery response.\nIn this case, ",Object(i.b)("inlineCode",{parentName:"p"},"host"),' will be parsed, "awesome-dogs" will be used as the service name, and "http://" will be used as the scheme for the resolved address.'),Object(i.b)("p",null,'Let\'s assume, Consul returns "192.168.1.15" as the resolved address, and "8080" as the service port.\nThe service URL will be ',Object(i.b)("inlineCode",{parentName:"p"},"http://192.168.1.15:8080"),". "),Object(i.b)("p",null,"The another way to set a resolver for a service is using service selectors:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-hcl"},'services {\n    select "com.semaphore.*" {\n        resolver = "consul"\n    }\n}\n')),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("p",null,"You can find an example in ",Object(i.b)("a",{parentName:"p",href:"https://github.com/jexia/semaphore/tree/master/examples/consul"},"Semaphore")," repositories, under ",Object(i.b)("inlineCode",{parentName:"p"},"examples/consul")," directory."))}p.isMDXComponent=!0}}]);