(self.webpackChunksemaphore=self.webpackChunksemaphore||[]).push([[685],{3905:function(e,r,n){"use strict";n.d(r,{Zo:function(){return p},kt:function(){return v}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(n),v=o,m=d["".concat(c,".").concat(v)]||d[v]||u[v]||i;return n?t.createElement(m,s(s({ref:r},p),{},{components:n})):t.createElement(m,s({ref:r},p))}));function v(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3395:function(e,r,n){"use strict";n.r(r),n.d(r,{frontMatter:function(){return s},metadata:function(){return a},toc:function(){return c},default:function(){return p}});var t=n(2122),o=n(9756),i=(n(7294),n(3905)),s={id:"service_discovery.configuration",title:"Service Discovery Client Configuration",sidebar_label:"Service Discovery",slug:"/service_discovery/configuration"},a={unversionedId:"service_discovery.configuration",id:"service_discovery.configuration",isDocsHomePage:!1,title:"Service Discovery Client Configuration",description:"Intro",source:"@site/docs/service_discovery-configuration.md",sourceDirName:".",slug:"/service_discovery/configuration",permalink:"/semaphore/docs/service_discovery/configuration",editUrl:"https://github.com/jexia/semaphore/edit/master/website/docs/service_discovery-configuration.md",version:"current",sidebar_label:"Service Discovery",frontMatter:{id:"service_discovery.configuration",title:"Service Discovery Client Configuration",sidebar_label:"Service Discovery",slug:"/service_discovery/configuration"},sidebar:"docs",previous:{title:"DevOps",permalink:"/semaphore/docs/devops"}},c=[{value:"Intro",id:"intro",children:[]},{value:"Defining clients",id:"defining-clients",children:[]},{value:"Using discovery clients",id:"using-discovery-clients",children:[]},{value:"Example",id:"example",children:[]}],l={toc:c};function p(e){var r=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"intro"},"Intro"),(0,i.kt)("p",null,"Semaphore can resolve service address not only through DNS, but using a specific service discovery server such as Consul by HashiCorp."),(0,i.kt)("p",null,"By default, Semaphore resolves service hosts  through the default DNS performing a regular query with no actions from the Semaphore side.\nWe can set up several service discovery configurations and use them as address resolvers in every service independently."),(0,i.kt)("h2",{id:"defining-clients"},"Defining clients"),(0,i.kt)("p",null,"To configure a service discovery client, we use ",(0,i.kt)("inlineCode",{parentName:"p"},"discovery")," block:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'discovery "consul" {\n  address = "http://localhost:8500"\n}\n')),(0,i.kt)("p",null,"By default, the block label (",(0,i.kt)("inlineCode",{parentName:"p"},'"consul"')," in the example above) defines not only the name of the configuration, but the provider type as well.\nWe still can define a configuration with a custom name, using ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," field to tell Semaphore what adapter it should use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'discovery "production-1" {\n  address = "http://localhost:8500"\n  provider = "consul"\n}\n')),(0,i.kt)("p",null,"Semaphore supports defining several discovery clients what might be useful in some rare cases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'discovery "production-old" {\n  address = "http://production-old:850"\n  provider = "consul"\n}\n\ndiscovery "production-new" {\n  address = "http://production-new:850"\n  provider = "consul"\n}\n\n// and so on\n')),(0,i.kt)("h2",{id:"using-discovery-clients"},"Using discovery clients"),(0,i.kt)("p",null,"To use a discovery service, we should set ",(0,i.kt)("inlineCode",{parentName:"p"},"resolver")," field in service configuration, referencing to the discovery client name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'service "com.semaphore" "awesome-dogs" {\n  transport = "http"\n  codec     = "json"\n  host      = "http://awesome-dogs"\n  resolver  = "consul" // or "production-old"\n\n  method "List" {\n    response = "com.semaphore.Dogs"\n    request = "com.semaphore.Void"\n\n    options {\n      endpoint = "/"\n      method = "GET"\n    }\n  }\n}\n')),(0,i.kt)("p",null,"When we set ",(0,i.kt)("inlineCode",{parentName:"p"},"resolver")," property, Semaphore uses ",(0,i.kt)("inlineCode",{parentName:"p"},"host")," property as a service name and scheme. But the port should be received from the Service Discovery response.\nIn this case, ",(0,i.kt)("inlineCode",{parentName:"p"},"host"),' will be parsed, "awesome-dogs" will be used as the service name, and "http://" will be used as the scheme for the resolved address.'),(0,i.kt)("p",null,'Let\'s assume, Consul returns "192.168.1.15" as the resolved address, and "8080" as the service port.\nThe service URL will be ',(0,i.kt)("inlineCode",{parentName:"p"},"http://192.168.1.15:8080"),". "),(0,i.kt)("p",null,"The another way to set a resolver for a service is using service selectors:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'services {\n    select "com.semaphore.*" {\n        resolver = "consul"\n    }\n}\n')),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"You can find an example in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jexia/semaphore/tree/master/examples/consul"},"Semaphore")," repositories, under ",(0,i.kt)("inlineCode",{parentName:"p"},"examples/consul")," directory."))}p.isMDXComponent=!0}}]);