package printer

import (
	"strings"
	"testing"
)

func Test_Printer(t *testing.T) {
	type test struct {
		options  Options
		expected string
	}

	tests := map[string]test{
		"inline": {
			options: Options{
				LineStart: "// ",
				LineEnd:   "\n",
			},
			expected: "// Code generated by Semaphore. DO NOT EDIT.\n// Semaphore version: v2.0.0\n// Timestamp: Thu, 01 Oct 2020 14:02:49 GMT\n",
		},
		"code block": {
			options: Options{
				StreamStart: "/*\n",
				LineStart:   " * ",
				LineEnd:     "\n",
				StreamEnd:   " */\n",
			},
			expected: "/*\n * Code generated by Semaphore. DO NOT EDIT.\n * Semaphore version: v2.0.0\n * Timestamp: Thu, 01 Oct 2020 14:02:49 GMT\n */\n",
		},
	}

	var printer = Printer{
		"Code generated by Semaphore. DO NOT EDIT.",
		"Semaphore version: v2.0.0",
		"Timestamp: Thu, 01 Oct 2020 14:02:49 GMT",
	}

	for title, test := range tests {
		t.Run(title, func(t *testing.T) {
			var buff strings.Builder

			if err := printer.Print(&buff, test.options); err != nil {
				t.Fatalf("unexpected error: %s", err)
			}

			if actual := buff.String(); actual != test.expected {
				t.Errorf("output:\n%s\nwas expected to be:\n%s", actual, test.expected)
			}
		})
	}
}
